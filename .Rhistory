#         ylab = "MEG Profit", zlab = "Predicted Price MEG")
# points3d(data$Price_crude_oil_coal ~ data$MEG_Profit + data$Price_MEG, col="blue")
data_logistic <- data[-1,]
data_logistic$newy <- ifelse(diff(data$Price_MEG) > 0, 1, 0)
data_logistic$newy <- as.factor(data_logistic$newy)
model_Log<- glm(newy ~., data=data_logistic[,-1],family =binomial)
summary(model_Log)
model_Log_step <- stepAIC(model_Log, direction = "both", criterion = "bic", trace = FALSE)
summary(model_Log_step)
getwd()
knitr::include_graphics("cross.png",error=FALSE)
# random forest
# Calculate the index to split the data
n <- nrow(data)
per <- 0.7
split_index <- floor(per * n)
df <- data[,-1]
# Randomly split the data into training and testing sets
rf_list <- list()
set.seed(123)
for (i in 1:( nrow(data)-split_index)  ) {
train_data <- df[1:split_index, ]
rf <- randomForest(Price_MEG ~ ., data = train_data, importance = T)
yhat <- predict(rf,newdata=df[(split_index + 1),-1])
split_index <- split_index+1
rf_list <- append(rf_list, yhat)
}
# Generalized additive model
# Calculate the index to split the data
split_index <- floor(per * n)
gam_list <- list()
# Randomly split the data into training and testing sets
set.seed(123)
for (i in 1:(nrow(data)-split_index)){
train_data <- df[1:split_index, ]
gam_model <- gam(Price_MEG ~  s(MEG_Profit) + s(MEG_Inventory)+s(Price_crude_oil_coal),
data = train_data , family = Gamma(link = "log"))
yhat <- predict(gam_model,newdata=df[split_index + 1,c(2,4,9)],type = "response")
split_index <- split_index+1
gam_list <- append(gam_list, yhat)
}
rf_predict <- as.numeric(unlist(rf_list))
rf_predict_all <- c(df[1:floor(per * n),]$Price_MEG,rf_predict)
gam_predict <- as.numeric(unlist(gam_list))
gam_predict_all <- c(df[1:floor(per * n),]$Price_MEG,gam_predict)
ggplot(data, aes(x=date)) +
geom_line(aes(y = gam_predict_all), color = "red")+
geom_line(aes(y = rf_predict_all), color = "black")+
geom_line(aes(y = Price_MEG), color = "blue")+
labs(title = "Comparsion of predicted price between two models", x = "Date", y = "MEG price")
mse_rf <- mean((rf_predict-df[(floor(per * n)+1):nrow(data),]$Price_MEG)^2)
mse_gam <- mean((gam_predict-df[(floor(per * n)+1):nrow(data),]$Price_MEG)^2)
mse_rf
mse_gam
library(Metrics)
# Calculate the index to split the data
split_index <- floor(per * n)
lg_list <- list()
data_logistic <- data_logistic[,-1]
# Randomly split the data into training and testing sets
set.seed(123)
for (i in 1:(nrow(data)-split_index)){
train_data <- data_logistic[1:split_index,]
lg_model <- glm(formula = newy ~  Price_crude_oil_coal+MEG_Profit + MEG_operating_rate + Downstream_Profits +
Downstream_Inventory, family = binomial, data = train_data)
yhat <- predict(lg_model,newdata=data_logistic[split_index + 1,c(2,4,5,6,8)],type = "response")
split_index <- split_index+1
lg_list <- append(lg_list, yhat)
}
logLoss(as.numeric(data_logistic[177:251,][,10])-1, as.numeric(unlist(lg_list))[1:75])
binary_vec <- ifelse(as.numeric(unlist(lg_list))[1:75] > 0.5, 1, 0)
table(as.numeric(data_logistic[177:251,][,10])-1,binary_vec)
misclassification_rate <- (7+12)/(27+12+7+29)
misclassification_rate
np_local_lm
summary(np_local_lm)
result
# getwd()
# knitr::include_graphics("cross.png",error=FALSE)
mse_rf <- mean((rf_predict-df[(floor(per * n)+1):nrow(data),]$Price_MEG)^2)
mse_gam <- mean((gam_predict-df[(floor(per * n)+1):nrow(data),]$Price_MEG)^2)
library(ggplot2)
library(gridExtra)
library(glmnet)
library(np)
library(nortest)
library(MASS)
library(glmnet)
library(leaps)
library(grid)
library(cowplot)
library(corrplot)
library(knitr)
library(mgcv)
library(randomForest)
library(gbm)
library(car)
library(tinytex)
#library(rgl)
#if (!requireNamespace("tinytex", quietly = TRUE)) {
#  install.packages("tinytex")
#}
#tinytex::reinstall_tinytex(repository = "illinois")
#tlmgr_install("titling")
#setwd('DATA 583/583-project')
raw_data <- read.csv("raw_data.csv")
# Create new variables
raw_data$Price_MEG <- raw_data$y
raw_data$Price_crude_oil_coal <- 0.6 * raw_data$x1 + 0.4 * raw_data$x3
raw_data$Upstream_MEG_Profit <- 0.5 * raw_data$x4 + 0.5 * raw_data$x5
raw_data$MEG_Profit <- 0.5 * raw_data$x6 + 0.5 * raw_data$x7
raw_data$MEG_operating_rate <- raw_data$x8
raw_data$Downstream_Profits <- 1/7 * (raw_data$x10 + raw_data$x11 + raw_data$x12 + raw_data$x13 + raw_data$x14 + raw_data$x15 + raw_data$x16)
raw_data$Downstream_Operating_Rate <- 1/6 * (raw_data$x17 + raw_data$x18 + raw_data$x19 + raw_data$x20 + raw_data$x21 + raw_data$x22)/100
raw_data$Downstream_Inventory <- 0.25 * (raw_data$x24 + raw_data$x25 + raw_data$x26 + raw_data$x27)
raw_data$MEG_Inventory <- 0.7 * raw_data$x29 + 0.3 * raw_data$x30
# Remove old variables and 'y', 'x23'
cols_to_remove <- c("y", "x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10", "x11", "x12", "x13", "x14", "x15", "x16", "x17", "x18", "x19", "x20", "x21", "x22", "x23", "x24", "x25", "x26", "x27", "x28", "x29", "x30")
data <- raw_data[, !(names(raw_data) %in% cols_to_remove)]
data$date <- as.Date(data$date)
# View the transformed dataset
data <- na.omit(data)
head(data)
dim(data)
# Apply kernel density estimate for Price_MEG using an Epanechnikov kernel.
bw1 <- npudensbw( ~ Price_MEG, data = data, ckertype = "epanechnikov", bwmethod = "cv.ml")
plot(npudens(bws = bw1), main = "Kernel density estimate for Price of MEG")
# Conduct Pearson tests for normality.
pearson.test(data$Price_MEG)
# Apply log transformation to the response variable
data$log_Price_MEG <- log(data$Price_MEG)
bw2 <- npudensbw( ~ log_Price_MEG, data = data, ckertype = "epanechnikov", bwmethod = "cv.ml")
plot(npudens(bws = bw2), main = "Kernel density estimate for Log Price of MEG")
# Apply square root transformation to the response variable
data$sqrt_Price_MEG <- sqrt(data$Price_MEG)
bw3 <- npudensbw( ~ sqrt_Price_MEG, data = data, ckertype = "epanechnikov", bwmethod = "cv.ml")
plot(npudens(bws = bw3), main = "Kernel density estimate for Square Root Price of MEG")
# Apply inverse transformation to the response variable
data$inv_Price_MEG <- 1/data$Price_MEG
bw4 <- npudensbw( ~ inv_Price_MEG, data = data, ckertype = "epanechnikov", bwmethod = "cv.ml")
plot(npudens(bws = bw4), main = "Kernel density estimate for Inverse Price of MEG")
# Apply inverse log transformation to the response variable
data$inv_log_Price_MEG <- 1/data$log_Price_MEG
bw5 <- npudensbw( ~ inv_log_Price_MEG, data = data, ckertype = "epanechnikov", bwmethod = "cv.ml")
plot(npudens(bws = bw5), main = "Kernel density estimate for Inverse Log Price of MEG")
# Drop the transformed response variables
cols_to_remove <- c("log_Price_MEG", "sqrt_Price_MEG", "inv_Price_MEG", "inv_log_Price_MEG")
data <- data[, !(names(data) %in% cols_to_remove)]
# Create a data frame with the information
df <- data.frame(
Variable_Name = c("date", "Price_MEG", "Price_crude_oil_coal", "Upstream_MEG_Profit", "MEG_Profit", "MEG_operating_rate", "Downstream_Profits", "Downstream_Operating_Rate", "Downstream_Inventory", "MEG_Inventory"),
Unit_of_Measurement = c("YYYY/M/D", "CNY()/ton", "USD()/barrel", "CNY()/ton", "CNY()/ton", "Percentage", "CNY()/ton", "Percentage", "10,000 Tons", "10,000 Tons"),
Continuous_vs_Discrete = c("Discrete", "Continuous", "Continuous", "Continuous", "Continuous", "Continuous", "Continuous", "Continuous", "Continuous", "Continuous")
)
# Print the table using kable
#kable(df, caption = "Table 1: Description of the variables")
options(np.messages=FALSE)
# Apply kernel density estimate for Price_MEG using an Epanechnikov kernel.
bw1 <- npudensbw( ~ Price_MEG, data = data, ckertype = "epanechnikov", bwmethod = "cv.ml")
plot(npudens(bws = bw1), main = "Kernel density estimate for Price of MEG",
xlab = "Price of MEG",
cex.lab = 0.8, cex.main = 0.9, cex.axis = 0.8)
title(sub = "Figure 1: Distribution of the response variable",
cex.sub = 0.8, line = 4)
# Create individual ggplot objects
log_Price_MEG_plot <- ggplot(data, aes(x = log(Price_MEG))) +
geom_density() +
labs(title = "Density of Log Price of MEG",
x = "Log Price of MEG")
sqrt_Price_MEG_plot <- ggplot(data, aes(x = sqrt(Price_MEG))) +
geom_density() +
labs(title = "Density of Square Root Price of MEG",
x = "Square Root Price of MEG")
inv_Price_MEG_plot <- ggplot(data, aes(x = 1 / Price_MEG)) +
geom_density() +
labs(title = "Density of Inverse Price of MEG",
x = "Inverse Price of MEG")
inv_log_Price_MEG_plot <- ggplot(data, aes(x = 1 / log(Price_MEG))) +
geom_density() +
labs(title = "Density of Inverse Log Price of MEG",
x = "Inverse Log Price of MEG")
# Create the caption with centered alignment
caption <- ggdraw() + draw_label(
"Figure 2: Density plots for different transformations of Price of MEG.",
x = 1, hjust = 0.5, vjust = 0.5, size = 12)
# Arrange the plots in a grid layout with the caption
plot_grid(log_Price_MEG_plot, sqrt_Price_MEG_plot, inv_Price_MEG_plot, inv_log_Price_MEG_plot, caption,
ncol = 2, nrow = 3, rel_heights = c(1, 1, 0.1))
model_ls <- lm(Price_MEG ~., data = data[,-1])
par(mfrow = c(1, 2))
# QQ plot with title
qqnorm(model_ls$residuals, main = "QQ Plot for Residuals")
qqline(model_ls$residuals)
# Histogram with title
hist(model_ls$residuals, breaks = 20, main = "Histogram for Residuals",
xlab = 'Model residuals')
# Add caption centered below the plots
mtext("Figure 3: Diagnostics plots", side = 1, line = 4, cex = 1.1, adj = 15.5)
# Check correlation between variables and plot the correlation plot with coefficients displayed
corrplot(cor(data[, -1]), method = "color", type = "upper",
addCoef.col = "black", # Color of the correlation coefficients
number.cex = 0.8,      # Font size of the correlation coefficients
tl.col = "black",      # Color of the variable names
tl.srt = 45,           # Text rotation angle for variable names
tl.cex = 0.8,          # Font size of the variable names
diag = FALSE)          # Do not display diagonal elements
# Add a caption below the plot
mtext("Figure 4: Correlation plot with coefficients between variables",
side = 1, line = 4.1, cex = 1.1)
lm_model <- lm(Price_MEG ~ Price_crude_oil_coal + Upstream_MEG_Profit + MEG_Profit + MEG_operating_rate + Downstream_Profits + Downstream_Operating_Rate + Downstream_Inventory + MEG_Inventory,
data = data)
vif_values <- vif(lm_model)
vif_values
options(np.messages=FALSE)
set.seed(8888)
#bw <- npregbw(Price_MEG ~ Price_crude_oil_coal + Upstream_MEG_Profit + MEG_Profit + MEG_operating_rate + Downstream_Profits + Downstream_Operating_Rate + Downstream_Inventory + MEG_Inventory, data = data, regtype = "ll", bwmethod = "cv.aic")
#np_local_lm <- npreg(bws = bw)
#result <- npsigtest(np_local_lm)
# Random forest
rf <- randomForest(Price_MEG ~ ., data = data[,-1], importance = T)
varImpPlot(rf)
title(sub = "Figure 5: Variable importance plot for random forest",
cex.sub = 1, line = 4)
boosting <-  gbm(Price_MEG ~ ., data = data[,-1], distribution = "gaussian",
n.trees = 10000, interaction.depth = 6,
shrinkage = 0.03, bag.fraction = 0.8)
#summary(boosting)
gam_model <- gam(Price_MEG ~  s(MEG_Profit) + s(MEG_Inventory) + s(Price_crude_oil_coal),
data = data[,-1], family = Gamma(link = "log"))
#summary(gam_model)
par(mfrow=c(1,3))
# Plot for MEG_Profit
plot(gam_model, select = 1, xlab = "MEG Profit", ylab = "Partial effect")
# Plot for Inventory
plot(gam_model, select = 2, xlab = "MEG Inventory", ylab = "Partial effect")
# Plot for Price_crude_oil_coal
plot(gam_model, select = 3, xlab = "Price crude oil coal", ylab = "Partial effect")
mtext("Figure 5: Marginal splines",
side = 1, line = 4.1, cex = 1, adj = 4.5)
# qqnorm(resid(gam_model))
# qqline(resid(gam_model))
# # Construct a 3D plot
# x1 <- seq(from = 200, to = 1000, by = 10)
# x2 <- seq(from = -2000, to = 3000, by = 50)
# x_grid <- data.frame(expand.grid(Price_crude_oil_coal = x1, MEG_Profit = x2))
#
# gam_pred <- predict(gam_model ,newdata = x_grid)
# surface <-  matrix(gam_pred, nrow=length(x1))
#
# open3d()
# persp3d(x = x1, y = x2,
#         z = surface, theta = 30, phi = 30, expand = 0.5,
#         col = "orange", xlab = "Price crude oil coal",
#         ylab = "MEG Profit", zlab = "Predicted Price MEG")
# points3d(data$Price_crude_oil_coal ~ data$MEG_Profit + data$Price_MEG, col="blue")
data_logistic <- data[-1,]
data_logistic$newy <- ifelse(diff(data$Price_MEG) > 0, 1, 0)
data_logistic$newy <- as.factor(data_logistic$newy)
model_Log<- glm(newy ~., data=data_logistic[,-1],family =binomial)
#summary(model_Log)
model_Log_step <- stepAIC(model_Log, direction = "both", criterion = "bic", trace = FALSE)
#summary(model_Log_step)
# getwd()
# knitr::include_graphics("cross.png",error=FALSE)
# random forest
# Calculate the index to split the data
n <- nrow(data)
per <- 0.7
split_index <- floor(per * n)
df <- data[,-1]
# Randomly split the data into training and testing sets
rf_list <- list()
set.seed(123)
for (i in 1:( nrow(data)-split_index)  ) {
train_data <- df[1:split_index, ]
rf <- randomForest(Price_MEG ~ ., data = train_data, importance = T)
yhat <- predict(rf,newdata=df[(split_index + 1),-1])
split_index <- split_index+1
rf_list <- append(rf_list, yhat)
}
# Generalized additive model
# Calculate the index to split the data
split_index <- floor(per * n)
gam_list <- list()
# Randomly split the data into training and testing sets
set.seed(123)
for (i in 1:(nrow(data)-split_index)){
train_data <- df[1:split_index, ]
gam_model <- gam(Price_MEG ~  s(MEG_Profit) + s(MEG_Inventory)+s(Price_crude_oil_coal),
data = train_data , family = Gamma(link = "log"))
yhat <- predict(gam_model,newdata=df[split_index + 1,c(2,4,9)],type = "response")
split_index <- split_index+1
gam_list <- append(gam_list, yhat)
}
rf_predict <- as.numeric(unlist(rf_list))
rf_predict_all <- c(df[1:floor(per * n),]$Price_MEG,rf_predict)
gam_predict <- as.numeric(unlist(gam_list))
gam_predict_all <- c(df[1:floor(per * n),]$Price_MEG,gam_predict)
ggplot(data, aes(x=date)) +
geom_line(aes(y = gam_predict_all), color = "red")+
geom_line(aes(y = rf_predict_all), color = "black")+
geom_line(aes(y = Price_MEG), color = "blue")+
labs(title = "Comparsion of predicted price between two models",
x = "Date",
y = "MEG price",
caption = "Figure: Comparison of GAM Model, Random Forest, and Actual Price") +
scale_color_manual(values = c("GAM Model" = "red", "Random Forest" = "black", "Actual Price" = "blue"))
rf_predict <- as.numeric(unlist(rf_list))
rf_predict_all <- c(df[1:floor(per * n),]$Price_MEG,rf_predict)
gam_predict <- as.numeric(unlist(gam_list))
gam_predict_all <- c(df[1:floor(per * n),]$Price_MEG,gam_predict)
ggplot(data, aes(x=date)) +
geom_line(aes(y = gam_predict_all), color = "red")+
geom_line(aes(y = rf_predict_all), color = "black")+
geom_line(aes(y = Price_MEG), color = "blue")+
labs(title = "Comparsion of predicted price between two models",
x = "Date",
y = "MEG price",
caption = "Figure 6: Comparison of GAM Model, Random Forest, and Actual Price") +
scale_color_manual("Legend", values = c("GAM Model" = "red",
"Random Forest" = "black",
"Actual Price" = "blue")) +
theme(plot.caption = element_text(hjust = 0.5))
rf_predict <- as.numeric(unlist(rf_list))
rf_predict_all <- c(df[1:floor(per * n),]$Price_MEG,rf_predict)
gam_predict <- as.numeric(unlist(gam_list))
gam_predict_all <- c(df[1:floor(per * n),]$Price_MEG,gam_predict)
ggplot(data, aes(x=date)) +
geom_line(aes(y = gam_predict_all), color = "red")+
geom_line(aes(y = rf_predict_all), color = "black")+
geom_line(aes(y = Price_MEG), color = "blue")+
labs(title = "Comparsion of predicted price between two models",
x = "Date",
y = "MEG price",
caption = "Figure 6: Comparison of GAM Model, Random Forest, and Actual Price") +
scale_color_manual("Legend", values = c("GAM Model" = "red",
"Random Forest" = "black",
"Actual Price" = "blue")) +
theme(plot.caption = element_text(hjust = 0.5))
rf_predict <- as.numeric(unlist(rf_list))
rf_predict_all <- c(df[1:floor(per * n),]$Price_MEG,rf_predict)
gam_predict <- as.numeric(unlist(gam_list))
gam_predict_all <- c(df[1:floor(per * n),]$Price_MEG,gam_predict)
ggplot(data, aes(x=date)) +
geom_line(aes(y = gam_predict_all), color = "red")+
geom_line(aes(y = rf_predict_all), color = "black")+
geom_line(aes(y = Price_MEG), color = "blue")+
labs(title = "Comparsion of predicted price between two models",
x = "Date",
y = "MEG price",
caption = "Figure 6: Comparison of GAM Model, Random Forest, and Actual Price") +
scale_color_manual("Legend", values = c("GAM Model" = "red",
"Random Forest" = "black",
"Actual Price" = "blue")) +
theme(plot.caption = element_text(hjust = 0.5),
legend.position = "topright")
rf_predict <- as.numeric(unlist(rf_list))
rf_predict_all <- c(df[1:floor(per * n),]$Price_MEG,rf_predict)
gam_predict <- as.numeric(unlist(gam_list))
gam_predict_all <- c(df[1:floor(per * n),]$Price_MEG,gam_predict)
ggplot(data, aes(x=date)) +
geom_line(aes(y = gam_predict_all), color = "red")+
geom_line(aes(y = rf_predict_all), color = "black")+
geom_line(aes(y = Price_MEG), color = "blue")+
labs(title = "Comparsion of predicted price between two models",
x = "Date",
y = "MEG price",
caption = "Figure 6: Comparison of GAM Model, Random Forest, and Actual Price") +
scale_color_manual("Legend", values = c("GAM Model" = "red",
"Random Forest" = "black",
"Actual Price" = "blue")) +
theme(plot.caption = element_text(hjust = 0.5),
legend.position = "topright")
rf_predict <- as.numeric(unlist(rf_list))
rf_predict_all <- c(df[1:floor(per * n),]$Price_MEG,rf_predict)
gam_predict <- as.numeric(unlist(gam_list))
gam_predict_all <- c(df[1:floor(per * n),]$Price_MEG,gam_predict)
ggplot(data, aes(x = date)) +
geom_line(aes(y = gam_predict_all, color = "GAM Model")) +
geom_line(aes(y = rf_predict_all, color = "Random Forest")) +
geom_line(aes(y = Price_MEG, color = "Actual Price")) +
labs(title = "Comparison of predicted price between two models",
x = "Date",
y = "MEG price",
caption = "Figure 6: Comparison of GAM Model, Random Forest, and Actual Price") +
scale_color_manual("Legend", values = c("GAM Model" = "red", "Random Forest" = "black", "Actual Price" = "blue")) +
theme(plot.caption = element_text(hjust = 0.5),
legend.position = "topright")
rf_predict <- as.numeric(unlist(rf_list))
rf_predict_all <- c(df[1:floor(per * n),]$Price_MEG,rf_predict)
gam_predict <- as.numeric(unlist(gam_list))
gam_predict_all <- c(df[1:floor(per * n),]$Price_MEG,gam_predict)
ggplot(data, aes(x = date)) +
geom_line(aes(y = gam_predict_all, linetype = "GAM Model"), color = "red") +
geom_line(aes(y = rf_predict_all, linetype = "Random Forest"), color = "black") +
geom_line(aes(y = Price_MEG, linetype = "Actual Price"), color = "blue") +
labs(title = "Comparison of predicted price between two models",
x = "Date",
y = "MEG price",
caption = "Figure 6: Comparison of GAM Model, Random Forest, and Actual Price") +
scale_linetype_manual("Legend", values = c("GAM Model" = "solid",
"Random Forest" = "solid",
"Actual Price" = "solid")) +
theme(plot.caption = element_text(hjust = 0.5),
legend.position = "bottom")
rf_predict <- as.numeric(unlist(rf_list))
rf_predict_all <- c(df[1:floor(per * n),]$Price_MEG,rf_predict)
gam_predict <- as.numeric(unlist(gam_list))
gam_predict_all <- c(df[1:floor(per * n),]$Price_MEG,gam_predict)
ggplot(data, aes(x = date)) +
geom_line(aes(y = gam_predict_all, linetype = "GAM Model"), color = "red") +
geom_line(aes(y = rf_predict_all, linetype = "Random Forest"), color = "black") +
geom_line(aes(y = Price_MEG, linetype = "Actual Price"), color = "blue") +
labs(title = "Comparison of predicted price between two models",
x = "Date",
y = "MEG price",
caption = "Figure 6: Comparison of GAM Model, Random Forest, and Actual Price") +
scale_linetype_manual("Legend", values = c("GAM Model" = "solid",
"Random Forest" = "solid",
"Actual Price" = "solid")) +
theme(plot.caption = element_text(hjust = 0.5),
legend.position = "top")
rf_predict <- as.numeric(unlist(rf_list))
rf_predict_all <- c(df[1:floor(per * n),]$Price_MEG,rf_predict)
gam_predict <- as.numeric(unlist(gam_list))
gam_predict_all <- c(df[1:floor(per * n),]$Price_MEG,gam_predict)
ggplot(data, aes(x = date)) +
geom_line(aes(y = gam_predict_all, linetype = "GAM Model"), color = "red") +
geom_line(aes(y = rf_predict_all, linetype = "Random Forest"), color = "black") +
geom_line(aes(y = Price_MEG, linetype = "Actual Price"), color = "blue") +
labs(title = "Comparison of predicted price between two models",
x = "Date",
y = "MEG price",
caption = "Figure 6: Comparison of GAM Model, Random Forest, and Actual Price") +
scale_linetype_manual("Legend: ", values = c("GAM Model" = "solid",
"Random Forest" = "solid",
"Actual Price" = "solid")) +
theme(plot.caption = element_text(hjust = 0.5),
legend.position = "top")
rf_predict <- as.numeric(unlist(rf_list))
rf_predict_all <- c(df[1:floor(per * n),]$Price_MEG,rf_predict)
gam_predict <- as.numeric(unlist(gam_list))
gam_predict_all <- c(df[1:floor(per * n),]$Price_MEG,gam_predict)
ggplot(data, aes(x = date)) +
geom_line(aes(y = gam_predict_all, color = "GAM Model"), linetype = "solid") +
geom_line(aes(y = rf_predict_all, color = "Random Forest"), linetype = "solid") +
geom_line(aes(y = Price_MEG, color = "Actual Price"), linetype = "solid") +
labs(title = "Comparison of predicted price between two models",
x = "Date",
y = "MEG price",
caption = "Figure: Comparison of GAM Model, Random Forest, and Actual Price") +
scale_color_manual("Legend", values = c("GAM Model" = "red", "Random Forest" = "black", "Actual Price" = "blue")) +
theme(plot.caption = element_text(hjust = 0.5),
legend.position = "bottom")
rf_predict <- as.numeric(unlist(rf_list))
rf_predict_all <- c(df[1:floor(per * n),]$Price_MEG,rf_predict)
gam_predict <- as.numeric(unlist(gam_list))
gam_predict_all <- c(df[1:floor(per * n),]$Price_MEG,gam_predict)
ggplot(data, aes(x = date)) +
geom_line(aes(y = gam_predict_all, color = "GAM Model"), linetype = "solid") +
geom_line(aes(y = rf_predict_all, color = "Random Forest"), linetype = "solid") +
geom_line(aes(y = Price_MEG, color = "Actual Price"), linetype = "solid") +
labs(title = "Comparison of predicted price between two models",
x = "Date",
y = "MEG price",
caption = "Figure: Comparison of GAM Model, Random Forest, and Actual Price") +
scale_color_manual("Legend: ", values = c("GAM Model" = "red",
"Random Forest" = "black",
"Actual Price" = "blue")) +
theme(plot.caption = element_text(hjust = 0.5),
legend.position = "bottom")
library(knitr)
library(kableExtra)
table_data <- data.frame(
Model = c("Nonparametric regression", "", "", "",
"Random Forest",
"Boosting",
"Generalized additive model", "",
"Logistic regression", "", ""),
Variables = c("Price_crude_oil_coal; MEG_Profit",
"Upstream_MEG_Profit; MMEG_operating_rate",
"Downstream_Profits; Downstream_Operating_Rate",
"",
"MEG_Profit; MEG Inventory",
"MEG_Profit",
"Price_crude_oil_coal; MEG_Profit; MEG Inventory",
"",
"Price_crude_oil_coal; MEG_Profit;",
"MEG_operating_rate; Downstream_Profits",
"Downstream_Inventory")
)
library(knitr)
library(kableExtra)
table_data <- data.frame(
Model = c("Nonparametric regression", "", "", "",
"Random Forest",
"Boosting",
"Generalized additive model", "",
"Logistic regression", "", ""),
Variables = c("Price_crude_oil_coal; MEG_Profit",
"Upstream_MEG_Profit; MMEG_operating_rate",
"Downstream_Profits; Downstream_Operating_Rate",
"",
"MEG_Profit; MEG Inventory",
"MEG_Profit",
"Price_crude_oil_coal; MEG_Profit; MEG Inventory",
"",
"Price_crude_oil_coal; MEG_Profit;",
"MEG_operating_rate; Downstream_Profits",
"Downstream_Inventory")
)
table_data
